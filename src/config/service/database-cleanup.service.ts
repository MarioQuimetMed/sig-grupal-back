import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { MongoClient } from 'mongodb';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class DatabaseCleanupService implements OnModuleInit {
  private readonly logger = new Logger(DatabaseCleanupService.name);

  constructor(
    @InjectDataSource() private dataSource: DataSource,
    private configService: ConfigService,
  ) {}

  /**
   * Este m√©todo se ejecuta autom√°ticamente cuando se inicia el m√≥dulo
   * y realiza la limpieza de la base de datos
   */
  async onModuleInit() {
    try {
      this.logger.log(
        'üîÑ Iniciando limpieza de √≠ndices en la base de datos...',
      );
      await this.cleanupDatabase();
    } catch (error) {
      this.logger.error(
        `‚ùå Error durante la limpieza de la base de datos: ${error.message}`,
      );
    }
  }

  /**
   * Limpia la base de datos eliminando √≠ndices problem√°ticos
   */
  private async cleanupDatabase(): Promise<void> {
    // Obtener la URL de conexi√≥n de MongoDB desde las variables de entorno
    const dbUrl = this.configService.get<string>('db_url');

    if (!dbUrl) {
      this.logger.error(
        '‚ùå No se encontr√≥ la URL de conexi√≥n a la base de datos',
      );
      return;
    }

    let client: MongoClient | null = null;

    try {
      // Conectar directamente a MongoDB
      this.logger.log('üîå Conectando a MongoDB...');
      client = new MongoClient(dbUrl);
      await client.connect();

      const db = client.db(); // Obtiene la base de datos por defecto

      // Verificar si existe la colecci√≥n 'order'
      const collections = await db.listCollections({ name: 'order' }).toArray();

      if (collections.length > 0) {
        this.logger.log(
          'üîç La colecci√≥n "order" existe, obteniendo √≠ndices...',
        );

        // Listar todos los √≠ndices de la colecci√≥n
        const indexes = await db.collection('order').indexes();
        this.logger.log(`üìã √çndices encontrados: ${indexes.length}`);

        // Buscar el √≠ndice problem√°tico
        const problemIndex = indexes.find(
          (idx) => idx.name === 'UQ_3d73ccc46a25e9d02806a5b6d07',
        );

        if (problemIndex) {
          this.logger.log(
            `üóëÔ∏è Eliminando √≠ndice problem√°tico: ${problemIndex.name}`,
          );
          await db.collection('order').dropIndex(problemIndex.name);
          this.logger.log('‚úÖ √çndice eliminado correctamente');
        } else {
          this.logger.log('‚ÑπÔ∏è No se encontr√≥ el √≠ndice problem√°tico');
        }
      } else {
        this.logger.log('‚ÑπÔ∏è La colecci√≥n "order" no existe todav√≠a');
      }
    } catch (error) {
      this.logger.error(`‚ùå Error durante la limpieza: ${error.message}`);
      throw error;
    } finally {
      if (client) {
        this.logger.log('üîå Cerrando conexi√≥n a MongoDB...');
        await client.close();
      }
    }

    this.logger.log('‚úÖ Proceso de limpieza completado');
  }
}
